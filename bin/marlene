#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'uri'
require 'net/http'
require File.dirname(__FILE__) + '/../lib/marlene.rb'

opts = Trollop::options do
  version "Marlene 0.1 (c) 2010 Thomas Duerr"
  banner <<-EOS
Marlene builds code for bookmarklets from a local or from a remote hoted javascript file.

Usage:
       marlene [options] <input>
       
where <input> is a file path or an URI to a javascript file.
       
[options] are:
EOS

  opt :output, "output file. If not set, output goes to clipboard (OSX only)", :default => "", :short => "-o"
  opt :include, "include bookmarklet code on top of input file as a comment", :default => false, :short => "-i"
#  opt :minimize, "minimize javascript code", :default => false, :short => "-m"
  opt :jslint, "analyse javascript code via jslint before", :default => false, :short => "-l"
  opt :publish, "build html page for bookmarklet and open it in a browser.", :default => false
#  opt :warn, "warn if bookmarklet code exceeds allowed maximum bookmark size", :default => true
#  opt :externalize, "externalize code and host it on github.com as a gist. Bookmarklet will load and execute code. This is useful for long scripts in particular.", :default => false
end 

Trollop::die "need at least a javascript file-path or a valid URI as input" if ARGV.empty?

input = ARGV.to_s

uri = URI.extract(input, 'http')[0]
if uri.nil? then

  #
  # ===== local javascript ==========
  #

  # stop if file does not exist
  Trollop::die "#{input} must exist" unless File.exist?(input) if input

  # read javascript file
  local_file = File.read(input)

  # build bookmarklet
  bookmarklet = local_file.compress.to_bookmarklet

  # include bookmarklet code as comment on top of input file
  if opts[:include]
  
    # remove first line if there's already a bookmarklet comment and 
    input.gsub!(/^\/\/ javascript:.+\n\n/, '')

    File.open(input, "w") do |f|      
      f.puts "// #{bookmarklet}\n\n#{input}"
    end
  end
   
else 
  
  #
  # ===== remote javascript ==========
  #
  
  # stop if URIs HTTP status is not 200
  def remote_file_exists?(url)
    url = URI.parse(url)
    Net::HTTP.start(url.host, url.port) do |http|
      return http.head(url.request_uri).code == "200"
    end
  end  
  Trollop::die "#{uri} must exist" unless remote_file_exists?(uri) if uri

  # build bookmarklet loadscript
  bookmarklet = uri.to_loader_script.compress.to_bookmarklet

end



# write bookmarklet code to a file "bookmarklet.js"
if opts[:output] != ""
  File.open(opts[:output], "w").write(bookmarklet)
end
  
# copy bookmarklet code to clipboard (OSX only)
IO.popen('pbcopy', 'w').puts bookmarklet

# stdout
puts bookmarklet

